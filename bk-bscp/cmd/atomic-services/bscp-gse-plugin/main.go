/*
 * Tencent is pleased to support the open source community by making Blueking Container Service available.,
 * Copyright (C) 2019 THL A29 Limited, a Tencent company. All rights reserved.
 * Licensed under the MIT License (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * http://opensource.org/licenses/MIT
 * Unless required by applicable law or agreed to in writing, software distributed under,
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */

package main

/*
int regFuncSendMsg(void* pFunc);
*/
import "C"
import "unsafe"

import (
	"runtime"

	"bk-bscp/cmd/atomic-services/bscp-gse-plugin/modules/gseagent"
	"bk-bscp/cmd/atomic-services/bscp-gse-plugin/service"
	"bk-bscp/pkg/framework"
)

/* DO NOT EDIT THIS FILE INCLUDEING THE COMMENTS, UNLESS YOU KNOW WHAT YOU DOING! */

var (
	// plugin instance.
	plugin *service.GSEPlugin
)

//export Init
func Init() C.int {
	runtime.GOMAXPROCS(runtime.NumCPU())

	plugin = service.NewGSEPlugin()

	plugin.Init(framework.Setting{
		Configfile: "../etc/bscp.yaml",
	})
	plugin.Run()

	return 0
}

//export Uninit
func Uninit(isForce C.int) C.int {
	if plugin != nil {
		plugin.Stop()
	}
	return 0
}

//export GetHealth
func GetHealth() *C.char {
	// TODO dynamic health status info from plugin runtime.

	var info = C.CString("{\"alive_status\":1,\"health_status\":1}")
	return info
}

//export RecvMsg
func RecvMsg(meta *C.char, metalen C.int, body *C.char, bodylen C.int) C.int {
	if plugin == nil {
		// plugin is not inited.
		return -1
	}

	md := C.GoStringN(meta, metalen)
	msg := C.GoStringN(body, bodylen)

	msgRecved := &gseagent.Message{Meta: []byte(md), Data: []byte(msg)}

	agent := plugin.GSEAgent()
	if agent == nil {
		// gse agent is not inited.
		return -2
	}
	agent.RecvMessage(msgRecved)

	return 0
}

//export RegFuncSendMsg
func RegFuncSendMsg(pFunc unsafe.Pointer) C.int {
	ret := gseagent.RegFuncSendMsg(pFunc)
	return C.int(ret)
}

func main() {
}
